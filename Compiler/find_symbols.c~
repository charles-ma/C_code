#include <stdio.h>
#include <stdlib.h>
#include <string.h>



int parse_function_header(char *header)
{
  if (header == NULL) return 0;

  // these are the 10 strings that you will populate
  char s0[10];
  char s1[10];
  char s2[10];
  char s3[10];
  char s4[10];
  char s5[10];
  char s6[10];
  char s7[10];
  char s8[10];
  char s9[10];
  char *strings[] = {s0, s1, s2, s3, s4, s5, s6, s7, s8, s9};
  
  printf("Calling tokenize function with input \"%s\".\n", header);
  int numWords = tokenize(header, strings);

  // let's see what got tokenized
  printf("The tokens are: \n");
  int i = 0;
  for (i = 0; i < 10; i++) {
    printf("%s\n", strings[i]);
  }

  // NOW LOOK AT EACH ELEMENT IN strings AND FIND THE PARAMETERS!
  int offs = 4;
  printf("The parameters are:\n");
  if(strcmp(strings[3], "")&& strcmp(strings[3], "{"))
    add_node(strings[3], offs++);
  if(strcmp(strings[5], ""))
    add_node(strings[5], offs++);
  if(strcmp(strings[7], ""))
    add_node(strings[7], offs++);
  return 1;
}



int parse_line(char *line)
{
  if (line == NULL) return 0;

  // these are the 10 strings that you will populate
  char s0[10];
  char s1[10];
  char s2[10];
  char s3[10];
  char s4[10];
  char s5[10];
  char s6[10];
  char s7[10];
  char s8[10];
  char s9[10];
  char *strings[] = {s0, s1, s2, s3, s4, s5, s6, s7, s8, s9};
  
  printf("Calling tokenize function with input \"%s\".\n", line);
  int numWords = tokenize(line, strings);

  // let's see what got tokenized
  printf("The tokens are: \n");
  int i = 0;
  for (i = 0; i < 10; i++) {
    printf("%s\n", strings[i]);
  }

  // NOW LOOK AT EACH ELEMENT IN strings AND FIND THE VARIABLE DECLARATIONS!
  int j = 0;
  int offsV = 0;
  printf("The variables are:\n");
  if(strcmp(strings[0], "int") == 0)
    for(j = 1; j < 10; j++){
      char c = strings[j][0];
      if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	if(strcmp(strings[j - 1], "=") && strcmp(strings[j - 1], "+"))
	  add_node(strings[j], offsV--);
    }
      
  return 1;
}


