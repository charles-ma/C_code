1. The operation of my program
   The executible is called thread_exp compiled from thread_exp.c. The main program will start two other threads(pthread) to run distinct tasks. After each task, the threads will write a String into memory locations on the main stack(and of course the writing operations are synchronized). If the syscall thread finishes first, it will stuff "The stdlibrary call thread finished first" into the memory space and then the stdlibrary thread will overwrite the locations with "The syscall thread finished first" so that we get the correct result and vise versa.

2. The results may vary during each execution. It depends on the scheduler not only the execution time of the thread itself. It won't have big effects if you switch the order of the thread creations because the chance for the main thread to be interrupted before it creates the second thread is pretty small and even if thread one always starts early than thread two, this will not be a guarantee the order of their finishes. We have to consider the running evironment, the OS and other factors to figure that out. In simple circumstances, the change of order may have a little impact on the chances of the appearance of the less common result.
   I ran my program several times, and to my observation, most of the time the stdlibrary thread will finish early but there are some exceptions. After I changed the order of the thread initialization, similar results will show up. So yes, my experiment supports my expectation.

